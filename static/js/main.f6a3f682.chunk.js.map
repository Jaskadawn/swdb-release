{"version":3,"sources":["components/ResourceFilter.js","components/ResourceSorter.js","components/Resource.js","components/ResourceContainer.js","components/CategoryButton.js","components/CategoryButtons.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["ResourceFilter","_ref","disabled","react_default","a","createElement","className","type","ResourceSorter","isUrl","s","test","Resource","caption","data","asd","Object","keys","forEach","key","i","val","push","replace","ResourceContainer","resourceName","isLoading","resources","map","elem","src_components_Resource","CategoryButton","category","clickHandler","onClick","CategoryButtons","categories","buttons","src_components_CategoryButton","Scroll","props","children","baseUrl","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onResourceSelected","asyncToGenerator","regenerator_default","mark","_callee","event","wrap","_context","prev","next","target","value","setState","fetchResource","stop","_x","apply","arguments","_callee2","resourceData","_context2","fetch","then","response","json","results","sent","state","_this2","_this$state","length","src_components_CategoryButtons","src_components_ResourceFilter","src_components_ResourceSorter","src_components_Scroll","src_components_ResourceContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6a3f682.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './ResourceFilter.css';\r\n\r\nconst ResourceFilter = ({ disabled }) => {\r\n  return (\r\n    <div className=\"ResourceFilter\">\r\n      <label>Search:</label>\r\n      <input type=\"text\" disabled={disabled} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResourceFilter;\r\n","import React from 'react';\r\n\r\nimport './ResourceSorter.css';\r\n\r\nconst ResourceSorter = ({ disabled }) => {\r\n  return (\r\n    <div className=\"ResourceSorter\">\r\n      <label>Sort:</label>\r\n      <select disabled={disabled}>\r\n        <option>Asdsd</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResourceSorter;\r\n","import React from 'react';\r\n\r\nimport './Resource.css';\r\n\r\nconst Resource = ({ data }) => {\r\n  let asd = [];\r\n  let caption;\r\n  const keys = Object.keys(data);\r\n  keys.forEach((key, i) => {\r\n    const val = data[key];\r\n    if (i === 0) {\r\n      caption = val;\r\n    } else if (!isUrl(val)) {\r\n      asd.push(\r\n        <tr key={i}>\r\n          <td>{key.replace('_', ' ') + ':'}</td>\r\n          <td>{val}</td>\r\n        </tr>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"Resource\">\r\n      <table>\r\n        <caption>{caption}</caption>\r\n        <tbody>{asd}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst isUrl = s => {\r\n  var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/;\r\n  return regexp.test(s);\r\n};\r\n\r\nexport default Resource;\r\n","import React from 'react';\r\nimport Resource from './Resource';\r\n\r\nimport './ResourceContainer.css';\r\n\r\nconst ResourceContainer = ({ resourceName, data, isLoading }) => {\r\n  const resources = data.map((elem, i) => <Resource key={i} data={elem} />);\r\n\r\n  if (isLoading) {\r\n    return <h2>Loading data...</h2>;\r\n  } else {\r\n    return <div className=\"ResourceContainer\">{resources}</div>;\r\n  }\r\n};\r\n\r\nexport default ResourceContainer;\r\n","import React from 'react';\r\nimport './CategoryButton.css';\r\n\r\nconst CategoryButton = ({ category, clickHandler }) => {\r\n  return (\r\n    <button className=\"CategoryButton\" onClick={clickHandler}>\r\n      {category}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CategoryButton;\r\n","import React from 'react';\r\nimport CategoryButton from './CategoryButton';\r\n\r\nimport './CategoryButtons.css';\r\n\r\nconst CategoryButtons = ({ categories, clickHandler }) => {\r\n  const buttons = Object.keys(categories).map((category, i) => {\r\n    return (\r\n      <CategoryButton\r\n        key={i}\r\n        category={category}\r\n        clickHandler={clickHandler(category)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div className=\"CategoryButtons\">{buttons}</div>;\r\n};\r\n\r\nexport default CategoryButtons;\r\n","import React from 'react';\r\n\r\nimport './Scroll.css';\r\n\r\nconst Scroll = props => {\r\n  return <div className=\"Scroll\">{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\nimport ResourceFilter from '../components/ResourceFilter';\nimport ResourceSorter from '../components/ResourceSorter';\nimport ResourceContainer from '../components/ResourceContainer';\nimport CategoryButtons from '../components/CategoryButtons';\nimport Scroll from '../components/Scroll';\n\nimport './App.css';\n\nconst baseUrl = 'https://swapi.co/api/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      resources: {},\n      resourceName: '',\n      resourceData: [],\n      isLoading: false\n    };\n  }\n\n  onResourceSelected = async event => {\n    const resourceName = event.target.value;\n    this.setState({ resourceName });\n    this.fetchResource(resourceName);\n  };\n\n  fetchResource = resourceName => {\n    return async () => {\n      this.setState({ isLoading: true });\n      const resourceData = await fetch(baseUrl + resourceName)\n        .then(response => response.json())\n        .then(response => response.results);\n      this.setState({ resourceData, isLoading: false });\n    };\n  };\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n    await fetch(baseUrl)\n      .then(response => response.json())\n      .then(data => this.setState({ resources: data, isLoading: false }));\n  }\n\n  render() {\n    const { resources, resourceName, resourceData, isLoading } = this.state;\n    const disabled = resourceData.length === 0 ? true : false;\n\n    return (\n      <div>\n        <div className=\"ResourceControls\">\n          <h1>\n            @ <span>DB</span>\n          </h1>\n          <CategoryButtons\n            categories={resources}\n            clickHandler={this.fetchResource}\n          />\n          <ResourceFilter disabled={disabled} />\n\n          <ResourceSorter disabled={disabled} />\n        </div>\n        <Scroll>\n          <ResourceContainer\n            isLoading={isLoading}\n            resourceName={resourceName}\n            data={resourceData}\n          />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}